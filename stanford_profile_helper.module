<?php

/**
 * @file
 * stanford_profile_helper_helper.module
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Core\Extension\Extension;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Serialization\Yaml;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\layout_builder\SectionComponent;
use Drupal\node\NodeInterface;
use Drupal\search_api\IndexInterface;
use Drupal\taxonomy_menu\Plugin\Menu\TaxonomyMenuMenuLink;

/**
 * Implements hook_search_api_index_items_alter().
 */
function stanford_profile_helper_search_api_index_items_alter(IndexInterface $index, array &$items) {
  $exclude_pages = \Drupal::config('system.site')->get('page');
  // Remove the 404, 403, and home page from indexing for search results.
  /** @var \Drupal\search_api\Item\Item $item */
  foreach ($items as $item_id => $item) {
    $entity = $item->getOriginalObject()->getValue();
    if ($entity instanceof NodeInterface) {
      if (in_array('/node/' . $entity->id(), $exclude_pages)) {
        unset($items[$item_id]);
      }
    }
  }
}

/**
 * Implements hook_filter_info_alter().
 */
function stanford_profile_helper_filter_info_alter(&$info) {
  if (
    isset($info['filter_mathjax']) &&
    \Drupal::moduleHandler()->moduleExists('mathjax')
  ) {
    $info['filter_mathjax']['class'] = 'Drupal\stanford_profile_helper\Plugin\Filter\Mathjax';
  }
}

/**
 * Implements hook_theme().
 */
function stanford_profile_helper_theme($existing, $type, $theme, $path) {
  $themes['block__stanford_basic_search'] = [
    'template' => 'block--stanford-basic-search',
    'original hook' => 'block',
  ];
  return $themes;
}

/**
 * Implements hook_library_info_alter().
 */
function stanford_profile_helper_library_info_alter(&$libraries, $extension) {
  if ($extension == 'mathjax') {
    $libraries['source']['dependencies'][] = 'stanford_profile_helper/mathjax';
    unset($libraries['setup'], $libraries['config']);
  }

  // Rely on the fontawesome module to provide the library.
  if (
    $extension == 'stanford_basic' &&
    \Drupal::moduleHandler()->moduleExists('fontawesome')
  ) {
    unset($libraries['fontawesome']);
  }
}

/**
 * Implements hook_entity_presave().
 */
function stanford_profile_helper_entity_presave(EntityInterface $entity) {
  if (
    $entity->getEntityTypeId() == 'node' &&
    $entity->uuid() == 'ce9cb7ca-6c59-4eea-9934-0a33057a7ff2' &&
    $entity->isNew() &&
    $entity->hasField('layout_builder__layout')
  ) {
    $entity->set('layout_builder__layout', _stanford_profile_helper_get_publications_layout());
  }
}

/**
 * Get the layout settings to be saved on the /publications node.
 *
 * Todo: this can be removed after the March 2021 code release.
 *
 * @return array|null
 *   Array of sections for layout builder to be saved in the field.
 */
function _stanford_profile_helper_get_publications_layout() {

  /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $view_display */
  $view_display = EntityViewDisplay::load('node.stanford_page.default');
  if (!$view_display) {
    return;
  }
  $layout_builder_sections = $view_display->getThirdPartySetting('layout_builder', 'sections');
  /** @var \Drupal\layout_builder\Section $section */
  foreach ($layout_builder_sections as $section) {
    if ($section->getLayoutId() == 'jumpstart_ui_two_column') {
      $section->removeComponent('582a6898-7096-40c2-bb65-99a556ada919');
      $uuid = \Drupal::service('uuid')->generate();
      $config = [
        'id' => 'system_menu_block:stanford-publication-topics',
        'label' => 'Filter by Topic',
        'provider' => 'system',
        'label_display' => 'visible',
        'level' => 1,
        'depth ' => 0,
        'expand_all_items' => 0,
        'context_mapping' => [],
      ];
      $sidebar_compontent = new SectionComponent($uuid, 'left', $config);
      $section->insertComponent(0, $sidebar_compontent);
    }
  }
  return $layout_builder_sections;
}

/**
 * Implements hook_preprocess_ds_entity_view().
 */
function stanford_profile_helper_preprocess_ds_entity_view(&$variables) {
  $variables['content']['#pre_render'][] = [
    'Drupal\stanford_profile_helper\StanfordPreRenderer',
    'preRenderDsEntity',
  ];
}

/**
 * Implements hook_menu_links_discovered_alter().
 */
function stanford_profile_helper_menu_links_discovered_alter(&$links) {
  if (isset($links['admin_toolbar_tools.extra_links:media_page'])) {
    // Alter the "Media" link for /admin/content/media path.
    $links['admin_toolbar_tools.extra_links:media_page']['title'] = t('All Media');
  }
  if (isset($links['system.admin_content'])) {
    // Change the node list page for the /admin/content path.
    $links['system.admin_content']['title'] = t('All Content');
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function stanford_profile_helper_preprocess_block__help(&$variables) {
  if (\Drupal::routeMatch()->getRouteName() == 'help.main') {
    // Removes the help text from core help module. Its not helpful, and we're
    // going to provide our own help text.
    // @see help_help()
    unset($variables['content']);
  }
}

/**
 * Implements hook_help_section_info_alter().
 */
function stanford_profile_helper_help_section_info_alter(array &$info) {
  // Change "Module overviews" header.
  $info['hook_help']['title'] = t('For Developers');
}

/**
 * Implements hook_preprocess_HOOK().
 */
function stanford_profile_helper_preprocess_input__submit__paragraph_action(&$variables) {
  // Change the top banner field button from "Add @type" to "Add Top @type".
  if ($variables['element']['#name'] == 'su_page_banner_stanford_banner_add_more') {
    $variables['attributes']['value'] = t('Add Top @type', $variables['attributes']['value']->getArguments());
  }
}

/**
 * Implements hook_entity_field_access().
 */
function stanford_profile_helper_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
  if (
    $field_definition->getName() == 'status' &&
    $field_definition->getTargetEntityTypeId() == 'node' &&
    $items &&
    $items->getEntity()->id()
  ) {
    // Prevent unpublishing the home, 404 and 403 pages.
    return stanford_profile_helper_node_access($items->getEntity(), 'delete', $account);
  }

  if ($field_definition->getType() == 'entity_reference' && $field_definition->getSetting('handler') == 'layout_library') {
    $entity_type = $field_definition->getTargetEntityTypeId();
    $bundle = $field_definition->getTargetBundle();
    if (!$account->hasPermission("choose layout for $entity_type $bundle")) {
      return AccessResult::forbidden();
    }
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function stanford_profile_helper_field_widget_options_select_form_alter(&$element, FormStateInterface $form_state, $context) {
  if ($context['items']->getFieldDefinition()
      ->getName() == 'layout_selection') {
    $element['#description'] = t('Choose a layout to display the page as a whole. Choose "- None -" to keep the default layout setting.');
  }
}

/**
 * Implements hook_preprocess_toolbar().
 */
function stanford_profile_helper_preprocess_toolbar(&$variables) {
  array_walk($variables['tabs'], function (&$tab, $key) {
    if (isset($tab['attributes'])) {
      $tab['attributes']->addClass(Html::cleanCssIdentifier("$key-tab"));
    }
  });
}

/**
 * Implements hook_contextual_links_alter().
 */
function stanford_profile_helper_contextual_links_alter(array &$links, $group, array $route_parameters) {
  if ($group == 'paragraph') {
    // Paragraphs edit module clone link does not function correctly. Remove it
    // from available links. Also remove delete to avoid unwanted delete.
    unset($links['paragraphs_edit.delete_form']);
    unset($links['paragraphs_edit.clone_form']);
  }
}

/**
 * Alter the data of a sitemap link before the link is saved.
 *
 * @param array $link
 *   An array with the data of the sitemap link.
 * @param array $context
 *   An optional context array containing data related to the link.
 */
function stanford_profile_helper_xmlsitemap_link_alter(array &$link, array $context) {

  // Get node/[:id] from loc.
  $node_id = $link['loc'];

  // Get 403 page path.
  $stanford_profile_helper_403_page = \Drupal::config('system.site')
    ->get('page.403');

  // Get 404 page path.
  $stanford_profile_helper_404_page = \Drupal::config('system.site')
    ->get('page.404');

  // If node id matches 403 or 404 pages, remove it from sitemap.
  switch ($node_id) {
    case $stanford_profile_helper_403_page:
    case $stanford_profile_helper_404_page:
      // Status is set to zero to exclude the item in the sitemap.
      $link['status'] = 0;

  }
}

/**
 * Implements hook_config_readonly_whitelist_patterns().
 */
function stanford_profile_helper_config_readonly_whitelist_patterns() {
  $default_theme = \Drupal::config('system.theme')->get('default');
  // Allow the theme settings to be changed in the UI.
  return ["$default_theme.settings"];
}

/**
 * Implements hook_preprocess_pattern_NAME().
 */
function stanford_profile_helper_preprocess_pattern_alert(&$variables) {
  $entity_type = $variables['context']->getProperty('entity_type');
  $bundle = $variables['context']->getProperty('bundle');
  $entity = $variables['context']->getProperty('entity');

  // Global Messages!
  if ($entity_type == "config_pages" && $bundle == "stanford_global_message") {

    // Validate that the entity has the field we need so we don't 500 the site.
    if (!$entity->hasField('su_global_msg_type')) {
      \Drupal::logger('stanford_profile_helper')
        ->error(t("Global Messages Config Block is missing the field su_global_msg_type"));
      return;
    }

    $color = $entity->get('su_global_msg_type')->getString();
    $variables['attributes']->addClass("su-alert--" . $color);
    $dark_bgs = ['error', 'info', 'success'];
    if (in_array($color, $dark_bgs)) {
      $variables['attributes']->addClass("su-alert--text-light");
    }
  }

}

/**
 * Implements hook_preprocess_pattern_NAME().
 */
function stanford_profile_helper_preprocess_pattern_localfooter(&$variables) {
  $entity_type = $variables['context']->getProperty('entity_type');
  $bundle = $variables['context']->getProperty('bundle');
  $entity = $variables['context']->getProperty('entity');

  // Local Footer!
  if ($entity_type == "config_pages" && $bundle == "stanford_local_footer") {

    // If the lockup updates are not enabled just end.
    if (
      !$entity->hasField('su_local_foot_use_loc')
      || $entity->get('su_local_foot_use_loc')->getString() === "1"
    ) {
      return;
    }

    // Enable custom lockup.
    $variables['custom_lockup'] = TRUE;

    // Lockup customizations are enabled.
    $variables['line1'] = $entity->get('su_local_foot_line_1')->getString();
    $variables['line2'] = $entity->get('su_local_foot_line_2')->getString();
    $variables['line3'] = $entity->get('su_local_foot_line_3')->getString();
    $variables['line4'] = $entity->get('su_local_foot_line_4')->getString();
    $variables['line5'] = $entity->get('su_local_foot_line_5')->getString();
    $variables['use_logo'] = $entity->get('su_local_foot_use_logo')
      ->getString();
    $file_field = $entity->get('su_local_foot_loc_img');

    // Check if there is a file.
    if (isset($file_field->entity)) {
      $file_uri = $file_field->entity->getFileUri();
      $variables['site_logo'] = file_create_url($file_uri);
    }
    else {
      $variables['use_logo'] = "1";
    }

    // Check if there is a link and patch it through.
    $link = $entity->get('su_local_foot_loc_link')->getString();
    if ($link) {
      $variables['lockup_link'] = [
        '#markup' => URL::fromUri($link)->toString(),
      ];
    }

    // Pass through the lockup option.
    $option = $entity->get('su_local_foot_loc_op')->getString();
    $variables['lockup_option'] = 'su-lockup--option-' . $option;
  }

}

/**
 * Implements hook_preprocess_HOOK().
 */
function stanford_profile_helper_preprocess_menu(&$variables) {
  foreach ($variables['items'] as &$item) {
    // Taxonomy menu link items use the description from the term as the title
    // attribute. The description can be very long and could contain HTML. To
    // Make things easiest, just remove the title attribute.
    if ($item['original_link'] instanceof TaxonomyMenuMenuLink) {
      $attributes = $item['url']->getOption('attributes');
      unset($attributes['title']);
      $item['url']->setOption('attributes', $attributes);
    }
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function stanford_profile_helper_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  if ($context['items']->getName() == 'su_page_components') {
    // Push pages to only allow 3 items per row but don't break any existing
    // pages that have 4 per row.
    $element['container']['value']['#attached']['drupalSettings']['reactParagraphs'][0]['itemsPerRow'] = 3;
  }

  if ($context['items']->getName() == 'field_media_embeddable_oembed') {
    $user = \Drupal::currentUser();
    $authorized = $user->hasPermission('create field_media_embeddable_code')
    || $user->hasPermission('edit field_media_embeddable_code');
    if (!$authorized) {
      $args = $element['value']['#description']['#items'][1]->getArguments();
      $args['@snow_form'] = 'https://stanford.service-now.com/it_services?id=sc_cat_item&sys_id=83daed294f4143009a9a97411310c70a';
      $new_desc = 'Allowed providers: @providers. For custom embeds, please <a href="@snow_form">request support.</a>';
      $element['value']['#description'] = t($new_desc, $args);
    }
  }
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function stanford_profile_helper_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {

  if (
    $bundle == 'stanford_global_message' &&
    !empty($fields['su_global_msg_enabled'])
  ) {
    $fields['su_global_msg_enabled']->addConstraint('global_message_constraint', []);
  }

}

/**
 * Get available roles, limited if the role_delegation module is enabled.
 *
 * @return array
 *   Keyed array of role id and role label.
 */
function _stanford_profile_helper_get_assignable_roles(): array {
  if (\Drupal::moduleHandler()->moduleExists('role_delegation')) {
    /** @var \Drupal\role_delegation\DelegatableRolesInterface $role_delegation */
    $role_delegation = \Drupal::service('delegatable_roles');
    return $role_delegation->getAssignableRoles(\Drupal::currentUser());
  }

  return user_role_names(TRUE);
}

/**
 * Implements hook_component_info_alter().
 */
function stanford_profile_helper_component_info_alter(&$components) {
  foreach ($components as $id => $component) {
    // Check if the provider of the PDB component is enabled.
    if (!_stanford_profile_helper_extension_enabled($component)) {
      unset($components[$id]);
    }
  }
}

/**
 * Traverse the PDB extension to see if it's module/theme/profile is enabled.
 *
 * @param \Drupal\Core\Extension\Extension $extension
 *   Discovered PDB extension object.
 *
 * @return bool
 *   If the PDB extension's provider is enabled.
 */
function _stanford_profile_helper_extension_enabled(Extension $extension) {
  $path = $extension->getPath();

  // Traverse down the path of the extension to find a module/theme/profile
  // that can be checked for existance.
  while ($path) {

    // An info.yml file exists in the current path, check if it's enabled as
    // a theme, profile, or module.
    if ($info_files = glob("$path/*.info.yml")) {
      $info_file_path = $info_files[0];
      $name = basename($info_file_path, '.info.yml');
      $info_file = Yaml::decode(file_get_contents($info_file_path));

      if (isset($info_file['type'])) {
        switch ($info_file['type']) {
          case 'theme':
            return \Drupal::service('theme_handler')->themeExists($name);

          case 'module':
          case 'profile':
            return \Drupal::moduleHandler()->moduleExists($name);
        }
      }
    }

    // Pop off the last part of the path to go one level higher.
    $path = explode('/', $path);
    array_pop($path);
    $path = implode('/', $path);
  }
  return FALSE;
}
