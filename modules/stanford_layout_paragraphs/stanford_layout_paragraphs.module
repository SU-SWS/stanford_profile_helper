<?php

/**
 * @file
 * Primary module hooks for stanford_layout_paragraphs module.
 */

use Drupal\Core\Template\Attribute;
use Drupal\views\ViewExecutable;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_theme().
 */
function stanford_layout_paragraphs_theme($existing, $type, $theme, $path) {
  // Duplicate the patterns_use_wrapper theme. We can modify it to work with
  // layout paragraphs.
  return ['patterns_use_wrapper_admin' => ['variables' => ['use' => NULL]]];
}

/**
 * Implements hook_library_info_alter().
 */
function stanford_layout_paragraphs_library_info_alter(&$libraries, $extension) {
  if ($extension == 'layout_paragraphs') {
    $libraries['builder']['dependencies'][] = 'stanford_layout_paragraphs/layout_paragraphs';
  }
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function stanford_layout_paragraphs_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if (
    str_starts_with($hook, 'pattern_') &&
    !str_contains($hook, 'pattern_view') &&
    _stanford_layout_paragraphs_is_editing_layout_paragraphs()
  ) {
    // Add the theme suggestion when we're editing layout builder components.
    $suggestions[] = 'patterns_use_wrapper_admin';
  }
}

/**
 * Implements hook_preprocess().
 */
function stanford_layout_paragraphs_preprocess(&$variables, $hook) {
  // If not editing LP page, we don't want to do anything.
  if (!_stanford_layout_paragraphs_is_editing_layout_paragraphs()) {
    return;
  }

  // Remove any contextual links on the media/paragraphs/other entities when
  // editing the layout paragraphs page.
  if (!empty($variables['elements']['#entity_type'])) {
    unset($variables['title_suffix']['contextual_links']);
  }

  // Manipulate the render array for the entity view so that we can pick it up
  // in the later hook on the pattern.
  if ($hook == 'ds_entity_view') {
    // Between this hook and the pattern hook, the id attribute changes somehow,
    // so store the attributes into the context so that we can grab them later
    // and apply them to the wrapper.
    $variables['content']['#context']['lpBuilder'] = $variables['attributes'];
    unset($variables['attributes']);
  }

  if (str_starts_with($hook, 'pattern_') && !empty($variables['context'])) {

    // Grab the layout paragraphs parts from the context that we saved above,
    // and put them into a variable for use in the patterns_use_wrapper_admin
    // template. Also remove the normal attributes to a wrapper so that they
    // don't somehow get passed down into the pattern and cause chaos.
    $wrapper_attributes = $variables['context']->getProperty('lpBuilder') ?? [];

    // Use the same classes that are output on the front end.
    $entity_type = Html::cleanCssIdentifier($variables['context']->getProperty('entity_type'));
    $bundle = Html::cleanCssIdentifier($variables['context']->getProperty('bundle'));
    if ($entity_type || $bundle) {
      $wrapper_attributes['class'][] = "ds-entity--$entity_type";
      $wrapper_attributes['class'][] = "ds-entity--$bundle";
    }

    $variables['wrapper_attributes'] = new Attribute($wrapper_attributes);
    $variables['attributes'] = new Attribute();
  }
}

/**
 * Is the user currently on editing the layout paragraphs?
 *
 * @return bool
 *   True if the route matches known routes for LP.
 */
function _stanford_layout_paragraphs_is_editing_layout_paragraphs() {
  $layout_paragraphs_routes = ['entity.node.edit_form'];
  $route_name = \Drupal::routeMatch()->getRouteName();
  return $route_name && (in_array($route_name, $layout_paragraphs_routes) || str_starts_with($route_name, 'layout_paragraphs.'));
}

/**
 * Implements hook_paragraphs_behavior_info_alter().
 */
function stanford_layout_paragraphs_paragraphs_behavior_info_alter(&$paragraphs_behavior) {
  $paragraphs_behavior['layout_paragraphs']['class'] = 'Drupal\stanford_layout_paragraphs\Plugin\paragraphs\Behavior\LayoutParagraphs';
}

/**
 * Implements hook_views_pre_execute().
 */
function stanford_layout_paragraphs_views_pre_execute(ViewExecutable $view) {
  if (_stanford_layout_paragraphs_is_editing_layout_paragraphs()) {
    $current_limit = $view->query->getLimit();
    if ($current_limit <= 0 || $current_limit > 5) {
      $view->query->setLimit(6);
    }
  }
}
