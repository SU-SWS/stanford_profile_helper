<?php

/**
 * @file
 * stanford_basic_page_types.module
 */


/**
 * Implements hook_metatags_alter().
 */
function stanford_basic_page_types_metatags_alter(array &$metatags, array $context) {

    if (!empty($context['entity']) && $context['entity'] instanceof Drupal\node\Entity\Node && $context['entity']->bundle() == 'stanford_page') {
      $entity = $context['entity'];
      // If we have something in the page description field,
      // we want that to take over the description metatag.
      if (!empty($entity->get('su_page_description')->getString())) {
        $metatags['description'] = "[node:su_page_description]";
      }
      // If we have a page image, we want to use that for
      // image-related metatags.
      if ($entity->get('su_page_image')->count()) {
        $metatags['og_image'] = "[node:su_page_image:entity:field_media_image:large]";
        $metatags['og_image_url'] = "[node:su_page_image:entity:field_media_image:large]";
      }
    }

}

/**
 * Implements hook_page_attachments()
 */
function stanford_basic_page_types_page_attachments(array &$attachments) {
  // Get the node from the route.
  $node = \Drupal::routeMatch()->getParameter('node');

  // Not a node.. Then just continue.
  if (!$node instanceof NodeInterface) {
    return;
  }

  $node_type = $node->getType();
  // Check for our type and add library if a match.
  if ($node_type == "stanford_page") {
    $attachments['#attached']['library'][] = "stanford_basic_page_types/stanford_basic_page_types_styles";
  }
}

/**
 * Implements hook_library_info_build().
 */
function stanford_basic_page_types_library_info_build() {
  $libraries = [];
  $module_path = drupal_get_path('module', 'stanford_basic_page_types');

  // Find all css files in the dist/css directory.
  $finder = new Finder();
  $finder->in("$module_path/dist/css")
    ->files()
    ->name('/.css$/');

  foreach ($finder->getIterator() as $file) {
    $local_path = str_replace("$module_path/", '', $file->getPath());

    $path_parts = explode('/', $local_path);
    // Remove `dist` and `css` parts.
    unset($path_parts[0], $path_parts[1]);

    // This is the directory the file lives in.
    $library_level = reset($path_parts);
    $bucket = next($path_parts);
    $lib = basename($file->getFilename(), '.css');

    // Build the library definition.
    $libraries[trim("$bucket.$lib", '. ')] = [
      'css' => [
        $library_level => [
          "$local_path/{$file->getFileName()}" => [],
        ],
      ],
    ];
  }

  return $libraries;
}
